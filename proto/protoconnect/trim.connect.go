// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: trim.proto

package protoconnect

import (
	proto "addsrv3/proto"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TrimName is the fully-qualified name of the Trim service.
	TrimName = "addsrv.Trim"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TrimTrimSpaceProcedure is the fully-qualified name of the Trim's TrimSpace RPC.
	TrimTrimSpaceProcedure = "/addsrv.Trim/TrimSpace"
)

// TrimClient is a client for the addsrv.Trim service.
type TrimClient interface {
	TrimSpace(context.Context, *connect.Request[proto.TrimRequest]) (*connect.Response[proto.TrimResponse], error)
}

// NewTrimClient constructs a client for the addsrv.Trim service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTrimClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TrimClient {
	baseURL = strings.TrimRight(baseURL, "/")
	trimMethods := proto.File_trim_proto.Services().ByName("Trim").Methods()
	return &trimClient{
		trimSpace: connect.NewClient[proto.TrimRequest, proto.TrimResponse](
			httpClient,
			baseURL+TrimTrimSpaceProcedure,
			connect.WithSchema(trimMethods.ByName("TrimSpace")),
			connect.WithClientOptions(opts...),
		),
	}
}

// trimClient implements TrimClient.
type trimClient struct {
	trimSpace *connect.Client[proto.TrimRequest, proto.TrimResponse]
}

// TrimSpace calls addsrv.Trim.TrimSpace.
func (c *trimClient) TrimSpace(ctx context.Context, req *connect.Request[proto.TrimRequest]) (*connect.Response[proto.TrimResponse], error) {
	return c.trimSpace.CallUnary(ctx, req)
}

// TrimHandler is an implementation of the addsrv.Trim service.
type TrimHandler interface {
	TrimSpace(context.Context, *connect.Request[proto.TrimRequest]) (*connect.Response[proto.TrimResponse], error)
}

// NewTrimHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTrimHandler(svc TrimHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	trimMethods := proto.File_trim_proto.Services().ByName("Trim").Methods()
	trimTrimSpaceHandler := connect.NewUnaryHandler(
		TrimTrimSpaceProcedure,
		svc.TrimSpace,
		connect.WithSchema(trimMethods.ByName("TrimSpace")),
		connect.WithHandlerOptions(opts...),
	)
	return "/addsrv.Trim/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TrimTrimSpaceProcedure:
			trimTrimSpaceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTrimHandler returns CodeUnimplemented from all methods.
type UnimplementedTrimHandler struct{}

func (UnimplementedTrimHandler) TrimSpace(context.Context, *connect.Request[proto.TrimRequest]) (*connect.Response[proto.TrimResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("addsrv.Trim.TrimSpace is not implemented"))
}
