// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: addsrv.proto

package protoconnect

import (
	proto "addsrv3/proto"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AddName is the fully-qualified name of the Add service.
	AddName = "addsrv.Add"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AddSumProcedure is the fully-qualified name of the Add's Sum RPC.
	AddSumProcedure = "/addsrv.Add/Sum"
	// AddConcatProcedure is the fully-qualified name of the Add's Concat RPC.
	AddConcatProcedure = "/addsrv.Add/Concat"
)

// AddClient is a client for the addsrv.Add service.
type AddClient interface {
	// Sum 对两个数字求和
	Sum(context.Context, *connect.Request[proto.SumRequest]) (*connect.Response[proto.SumResponse], error)
	// Concat 方法拼接两个字符串
	Concat(context.Context, *connect.Request[proto.ConcatRequest]) (*connect.Response[proto.ConcatResponse], error)
}

// NewAddClient constructs a client for the addsrv.Add service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAddClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AddClient {
	baseURL = strings.TrimRight(baseURL, "/")
	addMethods := proto.File_addsrv_proto.Services().ByName("Add").Methods()
	return &addClient{
		sum: connect.NewClient[proto.SumRequest, proto.SumResponse](
			httpClient,
			baseURL+AddSumProcedure,
			connect.WithSchema(addMethods.ByName("Sum")),
			connect.WithClientOptions(opts...),
		),
		concat: connect.NewClient[proto.ConcatRequest, proto.ConcatResponse](
			httpClient,
			baseURL+AddConcatProcedure,
			connect.WithSchema(addMethods.ByName("Concat")),
			connect.WithClientOptions(opts...),
		),
	}
}

// addClient implements AddClient.
type addClient struct {
	sum    *connect.Client[proto.SumRequest, proto.SumResponse]
	concat *connect.Client[proto.ConcatRequest, proto.ConcatResponse]
}

// Sum calls addsrv.Add.Sum.
func (c *addClient) Sum(ctx context.Context, req *connect.Request[proto.SumRequest]) (*connect.Response[proto.SumResponse], error) {
	return c.sum.CallUnary(ctx, req)
}

// Concat calls addsrv.Add.Concat.
func (c *addClient) Concat(ctx context.Context, req *connect.Request[proto.ConcatRequest]) (*connect.Response[proto.ConcatResponse], error) {
	return c.concat.CallUnary(ctx, req)
}

// AddHandler is an implementation of the addsrv.Add service.
type AddHandler interface {
	// Sum 对两个数字求和
	Sum(context.Context, *connect.Request[proto.SumRequest]) (*connect.Response[proto.SumResponse], error)
	// Concat 方法拼接两个字符串
	Concat(context.Context, *connect.Request[proto.ConcatRequest]) (*connect.Response[proto.ConcatResponse], error)
}

// NewAddHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAddHandler(svc AddHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	addMethods := proto.File_addsrv_proto.Services().ByName("Add").Methods()
	addSumHandler := connect.NewUnaryHandler(
		AddSumProcedure,
		svc.Sum,
		connect.WithSchema(addMethods.ByName("Sum")),
		connect.WithHandlerOptions(opts...),
	)
	addConcatHandler := connect.NewUnaryHandler(
		AddConcatProcedure,
		svc.Concat,
		connect.WithSchema(addMethods.ByName("Concat")),
		connect.WithHandlerOptions(opts...),
	)
	return "/addsrv.Add/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AddSumProcedure:
			addSumHandler.ServeHTTP(w, r)
		case AddConcatProcedure:
			addConcatHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAddHandler returns CodeUnimplemented from all methods.
type UnimplementedAddHandler struct{}

func (UnimplementedAddHandler) Sum(context.Context, *connect.Request[proto.SumRequest]) (*connect.Response[proto.SumResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("addsrv.Add.Sum is not implemented"))
}

func (UnimplementedAddHandler) Concat(context.Context, *connect.Request[proto.ConcatRequest]) (*connect.Response[proto.ConcatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("addsrv.Add.Concat is not implemented"))
}
